// Generated by CoffeeScript 1.7.1
'use strict';
var Promise, uuid;

uuid = require('node-uuid').v4;

Promise = require('bluebird');

module.exports = function(client) {
  var INDEX_USER_NAME, KEY_USER, all, find, id, save, update;
  INDEX_USER_NAME = 'wis:index:user:name';
  KEY_USER = function(uid) {
    return "wis:user:" + uid;
  };
  save = function(user) {
    var uid;
    uid = uuid();
    client.hmset(KEY_USER(uid), user);
    return client.hset(INDEX_USER_NAME, user.name, uid);
  };
  find = function(name) {
    return new Promise(function(resolve, reject) {
      return client.hget(INDEX_USER_NAME, name, function(err, uid) {
        if (!uid) {
          return reject('User not found.');
        }
        return client.hgetall(KEY_USER(uid), function(err, user) {
          if (!user) {
            return reject('User not found.');
          }
          return resolve({
            id: uid,
            profile: user
          });
        });
      });
    });
  };
  update = function(name, profile) {
    return client.hget(INDEX_USER_NAME, name, function(err, uid) {
      return client.hmset(KEY_USER(uid), profile);
    });
  };
  all = function() {
    return client.hgetall(INDEX_USER_NAME, function(err, indexes) {
      var name, uid, _results;
      _results = [];
      for (name in indexes) {
        uid = indexes[name];
        _results.push(find(name));
      }
      return _results;
    });
  };
  id = function(uid) {
    return new Promise(function(resolve, reject) {
      return client.hgetall(KEY_USER(uid), function(err, user) {
        if (!user) {
          return reject('User not found.');
        }
        return resolve({
          id: uid,
          profile: user
        });
      });
    });
  };
  return {
    all: all,
    find: find,
    id: id
  };
};
