// Generated by CoffeeScript 1.7.1
'use strict';
var userManager, uuid;

userManager = require('./model').user;

uuid = require('node-uuid');

module.exports = (function() {
  var Game, GameManager, Player, Presenter, main;
  Player = (function() {
    function Player(profile) {
      this.profile = profile;
    }

    Player.prototype.id = function() {
      return this.profile.uid;
    };

    Player.prototype.profile = function() {
      return this.profile;
    };

    Player.prototype.joinGame = function(game) {
      return game.add(this);
    };

    return Player;

  })();
  Game = (function() {
    function Game() {
      this.id = uuid.v4();
      this.players = [];
    }

    Game.prototype.add = function(player) {
      this.players.push(player);
      return player;
    };

    return Game;

  })();
  Presenter = (function() {
    function Presenter(options) {
      this.options = options;
    }

    Presenter.prototype.ready = function(socket) {
      return socket.on('join:game', function() {});
    };

    return Presenter;

  })();
  GameManager = (function() {
    var gameStore, playerStore, store;
    store = {};
    gameStore = {};
    playerStore = {};
    return {
      status: function() {
        return store;
      },
      register: function(context) {
        store[context.uid] = context;
        return context;
      },
      getPlayer: function(uid) {
        var player, profile;
        player = playerStore[uid];
        if (!player) {
          profile = userManager.find(uid);
          player = new Player(profile);
          playerStore[uid] = player;
        }
        return player;
      },
      registerPlayer: function(profile) {
        var player;
        player = new Player(profile);
        playerStore[player.id()] = player;
        return player;
      },
      queryGame: function() {
        var game;
        game = new Game();
        gameStore[game.id] = game;
        return game;
      },
      queryPlayer: function() {
        return playerStore;
      }
    };
  })();
  main = function() {
    var game, id, player, user, _i, _len, _ref, _ref1;
    _ref = userManager.all();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      user = _ref[_i];
      GameManager.registerPlayer(user);
    }
    game = GameManager.queryGame();
    _ref1 = GameManager.queryPlayer();
    for (id in _ref1) {
      player = _ref1[id];
      player.joinGame(game);
    }
    return game.players;
  };
  if (!module.parent) {
    main();
  }
  return {
    GameManager: GameManager,
    test: main()
  };
})();
