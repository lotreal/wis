// Generated by CoffeeScript 1.7.1
var Model, Promise, connect, cookie, jwt, parseSignedCookie, session, signature, _;

jwt = require('jsonwebtoken');

connect = require('express/node_modules/connect');

parseSignedCookie = connect.utils.parseSignedCookie;

cookie = require('express/node_modules/cookie');

session = require('./session');

_ = require('lodash');

Promise = require('bluebird');

Model = require('./model');

signature = require("cookie-signature");

module.exports = (function() {
  var auth_socket, getSessionID, getToken, login, secret, sign, verify;
  secret = 'jwt secret';
  sign = function(profile) {
    return jwt.sign(profile, secret);
  };
  verify = function(token, callback) {
    return jwt.verify(token, secret, callback);
  };
  getSessionID = function(req) {
    return new Promise(function(resolve, reject) {
      if (!req.headers.cookie) {
        return reject('No session.', false);
      }
      return session.cookieParser(req, null, function(err) {
        var sid;
        sid = req.cookies[session.key];
        if (!sid) {
          return reject('No cookie transmitted');
        }
        sid = sid.replace('s:', '');
        sid = signature.unsign(sid, session.secret);
        req.sessionID = sid;
        return session.sessionStore.get(sid, function(err, session) {
          if (err || !session) {
            return reject('Session not found.');
          } else {
            return resolve(session);
          }
        });
      });
    });
  };
  auth_socket = function(io) {
    return io.set('authorization', function(handshake, callback) {
      return getSessionID(handshake).then(function(session) {
        var token;
        token = session.token;
        if (!token) {
          return callback('Token not found');
        }
        return verify(token, function(err, data) {
          if (err) {
            return callback(err, false);
          }
          handshake.uid = data.uid;
          return callback(null, true);
        });
      }, function(err) {
        return callback(err, false);
      });
    });
  };
  login = function(name) {
    return new Promise(function(resolve, reject) {
      return Model.user.find(name).then(function(profile) {
        var token;
        console.log({
          login: profile
        });
        token = sign({
          uid: profile.id
        });
        return resolve(token);
      }, function(err) {
        return reject('Incorrect username or password.');
      });
    });
  };
  getToken = function(cookies) {
    return new Promise(function(resolve, reject) {
      var sid;
      cookies = cookie.parse(cookies);
      sid = parseSignedCookie(cookies.sid, session.cookieSecret);
      return session.store.get(sid, function(err, ok) {
        return verify(ok.token, function(err, data) {
          console.log({
            err: err
          });
          return resolve(data);
        });
      });
    });
  };
  return {
    sign: sign,
    verify: verify,
    socket: auth_socket,
    login: login
  };
})();
