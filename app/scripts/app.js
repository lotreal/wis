// Generated by CoffeeScript 1.7.1
'use strict';
var app;

app = angular.module('myNewProjectApp', ['ngRoute', 'ngAnimate', 'ui.bootstrap', 'app.directives']);

app.config(function($routeProvider, $locationProvider) {
  $routeProvider.when('/', {
    redirectTo: '/signin'
  }).when('/ui', {
    templateUrl: 'partials/ui',
    controller: 'UiCtrl'
  }).when('/wis', {
    templateUrl: 'partials/wis',
    controller: 'WisCtrl'
  }).when('/pm', {
    templateUrl: 'partials/pm',
    controller: 'MainCtrl'
  }).when('/signin', {
    templateUrl: 'partials/signin',
    controller: 'MainCtrl'
  }).otherwise({
    redirectTo: '/'
  });
  $locationProvider.html5Mode(true);
});

app.factory('socket', function($rootScope, $location) {
  var sio;
  sio = io.connect();
  sio.socket.on('error', function(reason) {
    console.log('Unable to connect Socket.IO: ' + reason);
    return $location.path('/signin');
  });
  sio.on('connect', function() {
    return console.info('successfully established a working connection \o/');
  });
  return {
    on: function(eventName, callback) {
      sio.on(eventName, function() {
        var args;
        args = arguments;
        $rootScope.$apply(function() {
          callback.apply(sio, args);
        });
      });
    },
    emit: function(eventName, data, callback) {
      sio.emit(eventName, data, function() {
        var args;
        args = arguments;
        $rootScope.$apply(function() {
          if (callback) {
            callback.apply(sio, args);
          }
        });
      });
    }
  };
});

app.factory('Passport', [
  '$q', '$cookies', '$cookieStore', 'SDK', function($q, $cookies, $cookieStore, SDK) {
    var exports, signin, token;
    token = 'user';
    signin = '/pages/signin';
    console.log($cookies);
    exports = {
      check: function() {
        var defered;
        defered = $q.defer();
        if ($cookies[token] != null) {
          defered.resolve();
        } else {
          defered.reject(signin);
        }
        return defered.promise;
      },
      auth: function(user, pass) {
        var promise;
        promise = SDK.api('passport/auth', {
          login: user,
          pass: pass
        });
        promise.then(function(ok) {
          console.log(ok);
          return $cookies[token] = ok.usercode;
        });
        return promise;
      },
      getCurrentUser: function() {
        return $cookies[token];
      },
      logout: function() {
        return $cookieStore.remove(token);
      }
    };
    return exports;
  }
]);
